#+auto_tangle: t
* quickcheck-tests
** file organization
:LOGBOOK:
CLOCK: [2025-07-23 Wed 08:38]--[2025-07-23 Wed 08:46] =>  0:08
CLOCK: [2025-07-19 Sat 13:53]--[2025-07-19 Sat 14:02] =>  0:09
:END:
** imports
:LOGBOOK:
CLOCK: [2025-07-25 Fri 06:49]--[2025-07-25 Fri 06:50] =>  0:01
:END:
*** DONE add s to imports 
CLOSED: [2025-07-25 Fri 06:51]
:LOGBOOK:
CLOCK: [2025-07-25 Fri 06:50]--[2025-07-25 Fri 06:51] =>  0:01
:END:
#+begin_src elisp :tangle yes
  ;;; quickcheck.el --- Quickcheck clone       -*- lexical-binding: t; -*-            
          (require 'ert)
          (require 'seq)
          (require 'calc-comb)
          (require 'cl-lib)
          (require 'dash)
          (require 's)

    (let ((parent-directory (file-name-directory (or load-file-name buffer-file-name))))
      (file-name-concat parent-directory "quickcheck"))
    (require 'quickcheck)
#+END_SRC

#+RESULTS:
: quickcheck

** Utilities
*** calc
**** extensions
***** DONE convert-calc-value-into-lisp
#+begin_src elisp :tangle yes
  (ert-deftest-n-times convert-calc-value-into-lisp 100
    (should (floatp (convert-calc-value-into-lisp (math-gaussian-float)))))  		     
#+end_src

*** dash
**** extensions
***** DONE times
#+begin_src elisp :tangle yes
  (ert-deftest times ()    
    (let* ((test-n (random 255))
  	 (test-constant (random))
  	 (actual-result (times (cl-constantly test-constant) test-n))
  	 (actual-constant-count (funcall #'seq-count (apply-partially #'eql test-constant) actual-result)))      
    (should (eql actual-constant-count test-n))))

#+END_SRC

#+RESULTS:
: (1 . 1)

***** DONE times-no-args
#+begin_src elisp :tangle yes

  (ert-deftest-n-times times-no-args 100
    (let* ((test-n (random 255))
  	 (test-constant (random))
  	 (actual-result (times-no-args (lambda () test-constant) test-n))
  	 (actual-constant-count (funcall #'seq-count (apply-partially #'eql test-constant) actual-result)))      
    (should (eql actual-constant-count test-n))))

#+END_SRC

*** seq
**** extensions
***** DONE seq-take-right
CLOSED: [2025-07-21 Mon 20:32]
:PROPERTIES:
:ID:       86ca383c-ed68-4f65-9f22-a5e0517fb7ee
:END:
:LOGBOOK:
CLOCK: [2025-07-21 Mon 20:30]--[2025-07-21 Mon 20:32] =>  0:02
CLOCK: [2025-07-21 Mon 19:28]--[2025-07-21 Mon 19:28] =>  0:00
:END:
****** DONE for lists
CLOSED: [2025-07-21 Mon 19:27]
:LOGBOOK:
CLOCK: [2025-07-21 Mon 19:20]--[2025-07-21 Mon 19:27] =>  0:07
CLOCK: [2025-07-19 Sat 13:39]--[2025-07-19 Sat 13:43] =>  0:04
CLOCK: [2025-07-19 Sat 13:17]--[2025-07-19 Sat 13:25] =>  0:08
:END:
- [[id:f6e8c581-96fe-4ed6-9593-342a2f700b31][semigroup-concat-vectors]]
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-take-right-for-lists 100
      (-let* (((test-list test-chunk-length) (funcall (-compose (-juxt #'identity #'seq-random-chunk-length) #'generate-test-list-of-integers)))
  	    ((actual-result actual-result-length) (funcall (-compose #'identity-and-seq-length #'seq-take-right) test-chunk-length test-list)))
        (should (eql actual-result-length test-chunk-length))
        (should (cl-subsetp actual-result test-list))))  
#+end_src
****** DONE for vectors
CLOSED: [2025-07-21 Mon 19:29]
:LOGBOOK:
CLOCK: [2025-07-21 Mon 19:28]--[2025-07-21 Mon 19:29] =>  0:01
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-take-right-for-vectors 100
      (-let* (((test-list test-chunk-length) (funcall (-compose (-juxt #'identity #'seq-random-chunk-length) #'generate-test-vector-of-integers)))
  	    ((actual-result actual-result-length) (funcall (-compose #'identity-and-seq-length #'seq-take-right) test-chunk-length test-list)))
        (should (eql actual-result-length test-chunk-length))
        (should (vectorp actual-result))))  
#+end_src
****** DONE for strings
CLOSED: [2025-07-21 Mon 19:30]
:LOGBOOK:
CLOCK: [2025-07-21 Mon 19:30]--[2025-07-21 Mon 19:30] =>  0:00
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-take-right-for-strings 100
      (-let* (((test-list test-chunk-length) (funcall (-compose (-juxt #'identity #'seq-random-chunk-length) #'generate-test-string)))
  	    ((actual-result actual-result-length) (funcall (-compose #'identity-and-seq-length #'seq-take-right) test-chunk-length test-list)))
        (should (eql actual-result-length test-chunk-length))
        (should (stringp actual-result))))  
#+end_src

***** DONE seq-shuffle
CLOSED: [2025-07-23 Wed 05:30]
:LOGBOOK:
CLOCK: [2025-07-23 Wed 02:29]--[2025-07-23 Wed 02:31] =>  0:02
CLOCK: [2025-07-22 Tue 22:31]--[2025-07-22 Tue 22:34] =>  0:03
:END:
- [[id:bc1b1a8d-b455-47e8-891a-a793e9f28034][seq-n-random-values]]
****** DONE list
CLOSED: [2025-07-23 Wed 05:23]
:LOGBOOK:
CLOCK: [2025-07-23 Wed 05:12]--[2025-07-23 Wed 05:12] =>  0:00
CLOCK: [2025-07-23 Wed 02:45]--[2025-07-23 Wed 02:51] =>  0:06
CLOCK: [2025-07-23 Wed 02:36]--[2025-07-23 Wed 02:38] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-shuffle-list 100
    (-let* (((actual-shuffled-list test-list) (funcall (-compose (-juxt #'seq-shuffle #'identity) #'generate-test-list-of-strings) :min-length 2)))
  	(should-not (seq-difference actual-shuffled-list test-list))))
#+end_src
****** DONE vector
CLOSED: [2025-07-23 Wed 05:27]
:LOGBOOK:
CLOCK: [2025-07-23 Wed 05:26]--[2025-07-23 Wed 05:27] =>  0:01
CLOCK: [2025-07-23 Wed 05:23]--[2025-07-23 Wed 05:25] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-shuffle-vector 100
    (-let* (((actual-shuffled-vector test-vector) (funcall (-compose (-juxt #'seq-shuffle #'identity) #'generate-test-vector-of-integers))))
          (should (vectorp actual-shuffled-vector))
  	(should-not (seq-difference actual-shuffled-vector test-vector))))
#+end_src
****** DONE string
CLOSED: [2025-07-23 Wed 05:30]
:LOGBOOK:
CLOCK: [2025-07-23 Wed 05:27]--[2025-07-23 Wed 05:29] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-shuffle-string 100
    (-let* (((actual-shuffled-string test-string) (funcall (-compose (-juxt #'seq-shuffle #'identity) #'generate-test-string))))
          (should (stringp actual-shuffled-string))
  	(should-not (seq-difference actual-shuffled-string test-string))))
#+end_src

***** DONE seq-take-last
CLOSED: [2025-07-23 Wed 08:50]
****** DONE for lists
CLOSED: [2025-07-23 Wed 08:32]
:LOGBOOK:
CLOCK: [2025-07-23 Wed 08:14]--[2025-07-23 Wed 08:32] =>  0:18
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-take-last-for-lists 100
      (-let* (((test-list test-chunk-length) (funcall (-compose (-juxt #'identity #'seq-random-chunk-length) #'generate-test-list-of-integers)))
  	    ((actual-result actual-result-length) (funcall (-compose #'identity-and-seq-length #'seq-take-last) test-chunk-length test-list)))
        (should (eql actual-result-length test-chunk-length))
        (should (cl-subsetp actual-result test-list))))  
#+end_src
****** DONE for vectors
CLOSED: [2025-07-23 Wed 08:32]
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-take-last-for-vectors 100
      (-let* (((test-list test-chunk-length) (funcall (-compose (-juxt #'identity #'seq-random-chunk-length) #'generate-test-vector-of-integers)))
  	    ((actual-result actual-result-length) (funcall (-compose #'identity-and-seq-length #'seq-take-last) test-chunk-length test-list)))
        (should (eql actual-result-length test-chunk-length))
        (should (vectorp actual-result))))  
#+end_src
****** DONE for strings
CLOSED: [2025-07-23 Wed 08:32]
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-take-last-for-strings 100
      (-let* (((test-string test-chunk-length) (funcall (-compose (-juxt #'identity #'seq-random-chunk-length) #'generate-test-string)))
  	    ((actual-result actual-result-length) (funcall (-compose #'identity-and-seq-length #'seq-take-last) test-chunk-length test-string)))
        (should (eql actual-result-length test-chunk-length))
        (should (stringp actual-result))))  
#+end_src

***** DONE seq-random-chunk-length
CLOSED: [2025-07-23 Wed 02:36]
:PROPERTIES:
:ID:       9cd4a40b-7f98-4ea3-b007-91947fae7bec
:END:
:LOGBOOK:
CLOCK: [2025-07-23 Wed 02:31]--[2025-07-23 Wed 02:36] =>  0:05
CLOCK: [2025-07-21 Mon 19:16]--[2025-07-21 Mon 19:20] =>  0:04
CLOCK: [2025-07-21 Mon 18:02]--[2025-07-21 Mon 18:07] =>  0:05
CLOCK: [2025-07-21 Mon 16:39]--[2025-07-21 Mon 16:42] =>  0:03
CLOCK: [2025-07-19 Sat 14:13]--[2025-07-19 Sat 14:26] =>  0:13
:END:
- [[id:86ca383c-ed68-4f65-9f22-a5e0517fb7ee][seq-take-right]]
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-random-chunk-length 100
      (-let* (((test-chunk-length test-list-length) (funcall (-compose (-juxt #'seq-random-chunk-length #'seq-length) #'generate-test-list-of-integers) :min-length 2)))
        (should (less-than test-chunk-length test-list-length))
        (should (greater-than-or-equal test-chunk-length 1))))

#+end_src
***** DONE seq-n-random-values
CLOSED: [2025-07-24 Thu 00:27]
:PROPERTIES:
:ID:       bc1b1a8d-b455-47e8-891a-a793e9f28034
:END:
- [[id:1b624bbf-bfeb-4ada-8a62-c90ea68fc91b][seq-subsetp]]
****** DONE lists
CLOSED: [2025-07-23 Wed 08:11]
:LOGBOOK:
CLOCK: [2025-07-23 Wed 08:05]--[2025-07-23 Wed 08:11] =>  0:06
CLOCK: [2025-07-23 Wed 07:13]--[2025-07-23 Wed 07:24] =>  0:11
CLOCK: [2025-07-23 Wed 07:00]--[2025-07-23 Wed 07:11] =>  0:11
CLOCK: [2025-07-23 Wed 05:31]--[2025-07-23 Wed 05:37] =>  0:06
CLOCK: [2025-07-22 Tue 22:27]--[2025-07-22 Tue 22:28] =>  0:01
CLOCK: [2025-07-22 Tue 22:24]--[2025-07-22 Tue 22:25] =>  0:01
CLOCK: [2025-07-22 Tue 22:20]--[2025-07-22 Tue 22:23] =>  0:03
CLOCK: [2025-07-22 Tue 22:13]--[2025-07-22 Tue 22:19] =>  0:06
CLOCK: [2025-07-22 Tue 02:31]--[2025-07-22 Tue 02:35] =>  0:04
CLOCK: [2025-07-08 Tue 21:53]--[2025-07-08 Tue 21:57] =>  0:04
CLOCK: [2025-07-08 Tue 19:43]--[2025-07-08 Tue 20:10] =>  0:27
CLOCK: [2025-07-07 Mon 22:27]--[2025-07-07 Mon 22:31] =>  0:04
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-n-random-values-list 100
    (-let* (((test-count test-list) (funcall (-compose (-juxt #'seq-random-chunk-length #'identity) #'generate-test-list-of-strings) :min-length 2))
  	  (actual-length (funcall (-compose #'seq-length #'seq-n-random-values) test-count test-list)))
      (should (eql actual-length test-count))))
#+end_src

****** DONE vectors
CLOSED: [2025-07-24 Thu 00:22]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 00:18]--[2025-07-24 Thu 00:22] =>  0:04
CLOCK: [2025-07-22 Tue 22:28]--[2025-07-22 Tue 22:31] =>  0:03
CLOCK: [2025-07-22 Tue 22:25]--[2025-07-22 Tue 22:27] =>  0:02
CLOCK: [2025-07-22 Tue 22:23]--[2025-07-22 Tue 22:24] =>  0:01
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-n-random-values-vector 100
    (-let* (((test-count test-vector) (funcall (-compose (-juxt #'seq-random-chunk-length #'identity) #'generate-test-vector-of-integers)))
  	 ((actual-vector actual-length) (funcall (-compose #'identity-and-seq-length #'seq-n-random-values) test-count test-vector)))
      (should (vectorp actual-vector))
      (should (eql actual-length test-count))))      
#+end_src

****** DONE string
CLOSED: [2025-07-24 Thu 00:25]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 00:23]--[2025-07-24 Thu 00:25] =>  0:02
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-n-random-values-string 100
    (-let* (((test-count test-string) (funcall (-compose (-juxt #'seq-random-chunk-length #'identity) #'generate-test-string)))
  	 ((actual-string actual-length) (funcall (-compose #'identity-and-seq-length #'seq-n-random-values) test-count test-string)))
      (should (stringp actual-string))
      (should (eql actual-length test-count))))      
#+end_src

***** DONE seq-random-values
CLOSED: [2025-07-24 Thu 02:46]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 02:29]--[2025-07-24 Thu 02:30] =>  0:01
:END:
- [[id:1b624bbf-bfeb-4ada-8a62-c90ea68fc91b][seq-subsetp]]
****** DONE lists
CLOSED: [2025-07-24 Thu 02:42]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 02:30]--[2025-07-24 Thu 02:40] =>  0:10
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-random-values-lists 100
    (-let* ((((actual-list actual-list-length) (test-list test-list-length))
  	  (funcall (-compose (apply-partially #'seq-map #'identity-and-seq-length) (-juxt #'seq-random-values #'identity) #'generate-test-list-of-strings))))      
      (should (listp actual-list))
      (should (less-than-or-equal actual-list-length test-list-length))))
#+end_src
****** DONE vectors
CLOSED: [2025-07-24 Thu 02:43]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 02:42]--[2025-07-24 Thu 02:43] =>  0:01
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-random-values-vectors 100
    (-let* ((((actual-vector actual-vector-length) (test-vector test-vector-length))
  	  (funcall (-compose (apply-partially #'seq-map #'identity-and-seq-length) (-juxt #'seq-random-values #'identity) #'generate-test-vector-of-integers))))      
      (should (vectorp actual-vector))
      (should (less-than-or-equal actual-vector-length test-vector-length))))
#+end_src
****** DONE strings
CLOSED: [2025-07-24 Thu 02:46]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 02:44]--[2025-07-24 Thu 02:46] =>  0:02
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-random-values-strings 100
    (-let* ((((actual-string actual-string-length) (test-string test-string-length))
  	  (funcall (-compose (apply-partially #'seq-map #'identity-and-seq-length) (-juxt #'seq-random-values #'identity) #'generate-test-string))))      
      (should (stringp actual-string))
      (should (less-than-or-equal actual-string-length test-string-length))))
#+end_src

***** DONE seq-random-iterate-from-max
CLOSED: [2025-07-24 Thu 07:48]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 07:45]--[2025-07-24 Thu 07:48] =>  0:03
CLOCK: [2025-07-24 Thu 04:37]--[2025-07-24 Thu 04:42] =>  0:05
:END:
- [[id:1b624bbf-bfeb-4ada-8a62-c90ea68fc91b][seq-subsetp]]
****** DONE lists  
CLOSED: [2025-07-24 Thu 07:48]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 04:27]--[2025-07-24 Thu 04:34] =>  0:07
CLOCK: [2025-07-24 Thu 02:47]--[2025-07-24 Thu 02:50] =>  0:03
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-random-iterate-from-max-lists 100
    (-let* (((actual-list test-list-max) (funcall (-compose (-juxt #'seq-random-iterate-from-max #'seq-max) #'generate-test-list-of-floats))))
      (should (seq-every-p (-rpartial #'greater-than-or-equal test-list-max) actual-list))))
#+end_src
****** DONE vectors
CLOSED: [2025-07-24 Thu 07:48]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 04:35]--[2025-07-24 Thu 04:36] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-random-iterate-from-max-vectors 100
    (-let* (((actual-vector test-vector-max) (funcall (-compose (-juxt #'seq-random-iterate-from-max #'seq-max) #'generate-test-vector-of-integers))))
      (should (vectorp actual-vector))
      (should (seq-every-p (-rpartial #'greater-than-or-equal test-vector-max) actual-vector))))
#+end_src
****** DONE strings
CLOSED: [2025-07-24 Thu 07:48]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 04:36]--[2025-07-24 Thu 04:37] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-random-iterate-from-max-strings 100
    (-let* (((actual-string test-string-max) (funcall (-compose (-juxt #'seq-random-iterate-from-max #'seq-max) #'generate-test-string))))
      (should (stringp actual-string))
      (should (seq-every-p (-rpartial #'greater-than-or-equal test-string-max) actual-string))))
#+end_src
***** DONE seq-subsetp
CLOSED: [2025-07-25 Fri 08:44]
:PROPERTIES:
:ID:       1b624bbf-bfeb-4ada-8a62-c90ea68fc91b
:END:
:LOGBOOK:
CLOCK: [2025-07-22 Tue 02:28]--[2025-07-22 Tue 02:28] =>  0:00
CLOCK: [2025-07-22 Tue 02:12]--[2025-07-22 Tue 02:27] =>  0:15
:END:
- [[id:138d45c7-6466-4bd3-b053-bba23d776006][seq-random-chunk]]
****** DONE list
CLOSED: [2025-07-24 Thu 07:53]
******* DONE true
CLOSED: [2025-07-24 Thu 07:53]
:PROPERTIES:
:ID:       a9fe509c-4ae7-45a1-bb48-b26b4a10b53a
:END:
:LOGBOOK:
CLOCK: [2025-07-24 Thu 07:48]--[2025-07-24 Thu 07:51] =>  0:03
CLOCK: [2025-07-24 Thu 00:26]--[2025-07-24 Thu 00:28] =>  0:02
CLOCK: [2025-07-24 Thu 00:26]--[2025-07-24 Thu 00:26] =>  0:00
CLOCK: [2025-07-22 Tue 20:26]--[2025-07-22 Tue 20:30] =>  0:04
CLOCK: [2025-07-22 Tue 20:26]--[2025-07-22 Tue 20:26] =>  0:00
CLOCK: [2025-07-22 Tue 02:28]--[2025-07-22 Tue 02:29] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-subsetp-list-true 100
        (-let* (((test-subset test-list) (funcall (-compose (-juxt #'seq-random-values #'identity) #'generate-test-list-of-strings)))
          (should (seq-subsetp test-subset test-list)))))
  
#+end_src
******* DONE false
CLOSED: [2025-07-24 Thu 07:53]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 07:51]--[2025-07-24 Thu 07:53] =>  0:02
CLOCK: [2025-07-22 Tue 20:33]--[2025-07-22 Tue 20:40] =>  0:07
CLOCK: [2025-07-22 Tue 20:31]--[2025-07-22 Tue 20:33] =>  0:02
CLOCK: [2025-07-22 Tue 02:29]--[2025-07-22 Tue 02:30] =>  0:01
CLOCK: [2025-07-22 Tue 02:27]--[2025-07-22 Tue 02:28] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-subsetp-list-false 100
        (-let* (((test-subset test-list) (funcall (-compose (-juxt #'seq-random-iterate-from-max #'identity) #'generate-test-list-of-integers)))
          (should-not (seq-subsetp test-subset test-list)))))

#+end_src

****** DONE vector
CLOSED: [2025-07-25 Fri 00:36]
:LOGBOOK:
CLOCK: [2025-07-24 Thu 07:53]--[2025-07-24 Thu 07:54] =>  0:01
:END:
******* DONE true
CLOSED: [2025-07-25 Fri 00:36]
:LOGBOOK:
CLOCK: [2025-07-25 Fri 00:24]--[2025-07-25 Fri 00:30] =>  0:06
CLOCK: [2025-07-25 Fri 00:16]--[2025-07-25 Fri 00:16] =>  0:00
CLOCK: [2025-07-24 Thu 07:54]--[2025-07-24 Thu 07:55] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-subsetp-vector-true 100
        (-let* (((test-subset test-vector) (funcall (-compose (-juxt #'seq-random-values #'identity) #'generate-test-vector-of-integers))))
          (should (seq-subsetp test-subset test-vector))))

#+end_src
******* DONE false
CLOSED: [2025-07-25 Fri 00:36]
:LOGBOOK:
CLOCK: [2025-07-25 Fri 00:23]--[2025-07-25 Fri 00:24] =>  0:01
CLOCK: [2025-07-24 Thu 07:55]--[2025-07-24 Thu 07:57] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-subsetp-vector-false 100
        (-let* (((test-subset test-vector) (funcall (-compose (-juxt #'seq-random-iterate-from-max #'identity) #'generate-test-vector-of-integers))))
          (should-not (seq-subsetp test-subset test-vector))))

#+end_src

****** DONE string
CLOSED: [2025-07-25 Fri 08:44]
:PROPERTIES:
:ID:       b5a6e600-7a94-40a4-af4f-5cc6f4496abf
:END:
:LOGBOOK:
CLOCK: [2025-07-25 Fri 01:10]--[2025-07-25 Fri 01:10] =>  0:00
:END:
******* DONE true
CLOSED: [2025-07-25 Fri 08:44]
:LOGBOOK:
CLOCK: [2025-07-25 Fri 08:25]--[2025-07-25 Fri 08:28] =>  0:03
CLOCK: [2025-07-25 Fri 06:51]--[2025-07-25 Fri 06:52] =>  0:01
CLOCK: [2025-07-25 Fri 06:34]--[2025-07-25 Fri 06:35] =>  0:01
CLOCK: [2025-07-25 Fri 04:02]--[2025-07-25 Fri 04:03] =>  0:01
CLOCK: [2025-07-25 Fri 03:59]--[2025-07-25 Fri 04:02] =>  0:03
CLOCK: [2025-07-25 Fri 01:10]--[2025-07-25 Fri 01:12] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-subsetp-string-true 100
        (-let* (((test-subset test-string) (funcall (-compose (-juxt #'seq-random-chunk #'identity) #'generate-test-string))))
  	(should (seq-subsetp test-subset test-string))))
#+end_src
******* DONE false
CLOSED: [2025-07-25 Fri 08:44]
:LOGBOOK:
CLOCK: [2025-07-25 Fri 08:44]--[2025-07-25 Fri 08:44] =>  0:00
CLOCK: [2025-07-25 Fri 04:03]--[2025-07-25 Fri 04:09] =>  0:06
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times seq-subsetp-string-false 100
        (-let* (((test-subset test-string) (funcall (-compose (-juxt #'reverse #'identity) #'generate-test-string))))
  	(should-not (seq-subsetp test-subset test-string))))
  	
#+end_src

***** DONE seq-random-chunk-of-size-n
CLOSED: [2025-07-25 Fri 06:44]
:PROPERTIES:
:ID:       138d45c7-6466-4bd3-b053-bba23d776006
:END:
:LOGBOOK:
CLOCK: [2025-07-25 Fri 06:41]--[2025-07-25 Fri 06:44] =>  0:03
CLOCK: [2025-07-25 Fri 03:57]--[2025-07-25 Fri 03:58] =>  0:01
CLOCK: [2025-07-21 Mon 22:43]--[2025-07-21 Mon 22:58] =>  0:15
:END:
- [[id:b5a6e600-7a94-40a4-af4f-5cc6f4496abf][string]]
- [[id:b4e905a2-34c5-4837-bb6f-d5b8731f95aa][stimes-string]]
****** DONE string 
CLOSED: [2025-07-25 Fri 06:51]
:LOGBOOK:
CLOCK: [2025-07-25 Fri 06:45]--[2025-07-25 Fri 06:49] =>  0:04
CLOCK: [2025-07-25 Fri 04:02]--[2025-07-25 Fri 04:02] =>  0:00
CLOCK: [2025-07-25 Fri 03:46]--[2025-07-25 Fri 03:55] =>  0:09
CLOCK: [2025-07-25 Fri 01:12]--[2025-07-25 Fri 01:15] =>  0:03
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-random-chunk-of-size-n-string 100
      (-let* (((test-chunk-length test-string) (funcall (-compose (-juxt #'seq-random-chunk-length #'identity) #'generate-test-string)))
  	    ((actual-chunk actual-chunk-length) (funcall (-compose #'identity-and-seq-length #'seq-random-chunk-of-size-n) test-chunk-length test-string)))
        (should (stringp actual-chunk))
        (should (s-contains? actual-chunk test-string))))
#+end_src

****** DONE list 
CLOSED: [2025-07-25 Fri 03:56]
:LOGBOOK:
CLOCK: [2025-07-25 Fri 03:55]--[2025-07-25 Fri 03:55] =>  0:00
CLOCK: [2025-07-25 Fri 01:29]--[2025-07-25 Fri 01:33] =>  0:04
CLOCK: [2025-07-25 Fri 01:23]--[2025-07-25 Fri 01:27] =>  0:04
CLOCK: [2025-07-25 Fri 01:15]--[2025-07-25 Fri 01:18] =>  0:03
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-random-chunk-of-size-n-list 100
      (-let* (((test-chunk-length test-list) (funcall (-compose (-juxt #'seq-random-chunk-length #'identity) #'generate-test-list-of-integers)))
  	    ((actual-chunk actual-chunk-length) (funcall (-compose #'identity-and-seq-length #'seq-random-chunk-of-size-n) test-chunk-length test-list)))
        (should (listp actual-chunk))
        (should (seq-subsetp actual-chunk test-list))))
#+end_src
****** DONE vector 
CLOSED: [2025-07-25 Fri 03:56]
:LOGBOOK:
CLOCK: [2025-07-25 Fri 03:55]--[2025-07-25 Fri 03:56] =>  0:01
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times seq-random-chunk-of-size-n-vector 100
      (-let* (((test-chunk-length test-vector) (funcall (-compose (-juxt #'seq-random-chunk-length #'identity) #'generate-test-vector-of-integers)))
  	    ((actual-chunk actual-chunk-length) (funcall (-compose #'identity-and-seq-length #'seq-random-chunk-of-size-n) test-chunk-length test-vector)))
        (should (vectorp actual-chunk))
        (should (seq-subsetp actual-chunk test-vector))))
#+end_src


*** math
**** DONE between-one-and-?
CLOSED: [2025-07-21 Mon 18:02]
:LOGBOOK:
CLOCK: [2025-07-21 Mon 17:58]--[2025-07-21 Mon 18:00] =>  0:02
CLOCK: [2025-07-21 Mon 17:49]--[2025-07-21 Mon 17:55] =>  0:06
CLOCK: [2025-07-21 Mon 17:47]--[2025-07-21 Mon 17:49] =>  0:02
CLOCK: [2025-07-21 Mon 16:42]--[2025-07-21 Mon 17:03] =>  0:21
:END:
- [[id:9cd4a40b-7f98-4ea3-b007-91947fae7bec][seq-random-chunk-length]]
***** DONE true test
CLOSED: [2025-07-21 Mon 18:00]
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times between-one-and-?-true 100
    (-let* (((test-? test-integer) (funcall (-compose (-juxt #'1+ #'identity) #'random-integer-in-range-255))))
      (should (eq (funcall (between-one-and-? test-?) test-integer) t))))
#+end_src

***** DONE false test
CLOSED: [2025-07-21 Mon 18:02]
:LOGBOOK:
CLOCK: [2025-07-21 Mon 18:00]--[2025-07-21 Mon 18:02] =>  0:02
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times between-one-and-?-false 100
    (-let* (((test-integer test-?) (funcall (-compose (-juxt #'1+ #'identity) #'random-integer-in-range-255))))
      (should (eq (funcall (between-one-and-? test-?) test-integer) 'nil))))
#+end_src

**** DONE non-zero-bounded-modular-addition
#+begin_src emacs-lisp :tangle yes

      (ert-deftest-n-times non-zero-bounded-modular-addition-max-test 100
        (let* ((range-max (random 100000000))
      	 (range-min (- range-max (random range-max) 2))
      	 (increase 1)
      	 (expected-result range-min)
      	 (current-number (1- range-max))
      	 (actual-result (non-zero-bounded-modular-addition (list range-min range-max) increase current-number)))
  			    (should (eql actual-result expected-result))))


      (ert-deftest-n-times non-zero-bounded-modular-addition-min-test 100
        (let* ((range-max (random 10000000))
    	 (range-min (- range-max (random range-max) 2))
    	 (increase 1)
    	 (expected-result (1+ range-min))
    	 (current-number range-min)
    	 (actual-result (non-zero-bounded-modular-addition (list range-min range-max) increase current-number)))
  			    (should (eql actual-result expected-result))))

    (ert-deftest-n-times non-zero-bounded-modular-addition-basic-integer-test 100
      (let* ((range-max (random 10000000))
    	 (range-min (- range-max (random range-max) 2))
    	 (increase (random range-max))
    	 (current-number (random range-max))
    	 (actual-result (non-zero-bounded-modular-addition (list range-min range-max) increase current-number)))
  			 (should (eql (and (greater-than-or-equal actual-result range-min) (less-than actual-result range-max)) t))))


#+END_SRC

**** DONE random-float-between-0-and-1
#+begin_src elisp :tangle yes
  (ert-deftest-n-times random-float-between-0-and-1 100
    (should (floatp (random-float-between-0-and-1))))  		     
#+END_SRC

**** DONE scale-float-to-range
#+begin_src elisp :tangle yes
  (ert-deftest-n-times scale-float-to-range 100    
      (let* ((test-max (random 10000000))
  	   (test-min (- test-max (random test-max) 2))
  	   (test-float-to-scale (convert-calc-value-into-lisp (math-random-float)))
  	   (actual-float (scale-float-to-range (list test-min test-max) test-float-to-scale)))
        (should (greater-than-or-equal actual-float test-min))
        (should (less-than actual-float test-max))))
#+END_SRC

***** DONE Test divide-array-values-by-max-array-value
CLOSED: [2025-07-05 Sat 08:34]
:LOGBOOK:
CLOCK: [2025-07-04 Fri 03:16]--[2025-07-04 Fri 03:28] =>  0:12
CLOCK: [2025-07-04 Fri 03:13]--[2025-07-04 Fri 03:14] =>  0:01
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times divide-array-values-by-max-array-value 100
    (-let* (((actual-list expected-list-length) (funcall (-juxt #'divide-array-values-by-max-array-value #'seq-length)  (random-integer-list-in-range-255))))
      (should (eql (seq-count-between-zero-and-one actual-list) expected-list-length))))
#+end_src


** Testing 
*** random data generators
**** DONE random-integer-in-range
CLOSED: [2025-06-30 Mon 21:19]
#+begin_src elisp :tangle yes
  (ert-deftest-n-times random-integer-in-range 100    
        (let* ((test-max (random 10000000))
    	   (test-min (- test-max (random test-max) 2))  	   
    	   (actual-integer (random-integer-in-range (list test-min test-max))))
  	(should (integerp actual-integer))
          (should (greater-than-or-equal actual-integer test-min))
          (should (less-than actual-integer test-max))))
#+END_SRC

**** DONE random-integer-list
CLOSED: [2025-07-01 Tue 05:21]
#+BEGIN_SRC emacs-lisp :tangle yes
  (ert-deftest-n-times random-integer-list 100
    (-let* (((actual-list expected-list-length) (funcall (-juxt #'random-integer-list #'identity) (calcFunc-random-255))))
    (should (eql (seq-count-integers actual-list ) expected-list-length))))
#+END_SRC

**** DONE random-integer-range
CLOSED: [2025-07-03 Thu 06:51]
#+BEGIN_SRC emacs-lisp :tangle yes
  (ert-deftest-n-times random-integer-range 100
    (-let* (((actual-range expected-range-length) (funcall (-juxt #'random-integer-range #'identity) (random-integer-in-range (list 1 10000)))))
    (should (eql (range-size actual-range) expected-range-length))))
#+END_SRC
**** DONE divide-by-random-value
CLOSED: [2025-07-07 Mon 19:25]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 19:18]--[2025-07-07 Mon 19:25] =>  0:07
CLOCK: [2025-07-07 Mon 19:16]--[2025-07-07 Mon 19:17] =>  0:01
CLOCK: [2025-07-07 Mon 14:36]--[2025-07-07 Mon 14:56] =>  0:20
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times divide-by-random-value 100
    (-let* (((actual-result actual-input-value) (funcall (-compose (-juxt #'divide-by-random-value #'identity) #'random-integer-in-range-255))))
      (should (floatp actual-result))
      (should (less-than-or-equal actual-result actual-input-value))))
#+end_src
**** DONE divide-array-values-by-random-value
CLOSED: [2025-07-07 Mon 19:27]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 19:25]--[2025-07-07 Mon 19:27] =>  0:02
CLOCK: [2025-07-07 Mon 19:17]--[2025-07-07 Mon 19:17] =>  0:00
CLOCK: [2025-07-07 Mon 14:30]--[2025-07-07 Mon 14:30] =>  0:00
CLOCK: [2025-07-05 Sat 08:35]--[2025-07-05 Sat 08:40] =>  0:05
:END:
#+begin_src emacs-lisp :tangle yes
  (ert-deftest-n-times divide-array-values-by-random-seq-value 100
    (-let* (((actual-list expected-list-length) (funcall (-juxt #'divide-array-values-by-random-value #'seq-length)  (random-integer-list-in-range-255))))
      (should (eql (seq-count-floats actual-list) expected-list-length))))
#+end_src



**** TODO Test generate-test-data
***** DONE Lists
CLOSED: [2025-07-07 Mon 21:56]
****** DONE List of integers
CLOSED: [2025-07-07 Mon 21:44]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 21:38]--[2025-07-07 Mon 21:44] =>  0:06
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-list-of-integers 100
      (-let* (((actual-integer-count actual-list-length actual-list)
  	     (funcall (-compose (-juxt #'seq-count-integers #'seq-length #'identity) #'generate-test-data) :min-length 1 :max-length 255)))
        (should (eql actual-integer-count actual-list-length))
        (should (between-one-and-255 actual-integer-count))))
#+END_SRC
****** DONE List of floats between zero and one
CLOSED: [2025-07-07 Mon 21:47]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 21:44]--[2025-07-07 Mon 21:47] =>  0:03
CLOCK: [2025-07-04 Fri 06:17]--[2025-07-04 Fri 06:24] =>  0:07
CLOCK: [2025-07-04 Fri 03:31]--[2025-07-04 Fri 03:31] =>  0:00
CLOCK: [2025-07-04 Fri 03:28]--[2025-07-04 Fri 03:29] =>  0:01
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-list-of-floats-1 100
    (-let* (((actual-floats-count actual-list-length actual-list)
  	     (funcall (-compose (-juxt #'seq-count-floats #'seq-length #'identity) #'generate-test-list-of-floats-between-zero-and-one))))
        (should (eql actual-floats-count actual-list-length))
        (should (between-one-and-255 actual-floats-count))))
#+END_SRC

****** DONE List of floats 
CLOSED: [2025-07-07 Mon 19:29]
:LOGBOOK:
CLOCK: [2025-07-05 Sat 04:44]--[2025-07-05 Sat 05:02] =>  0:18
CLOCK: [2025-07-04 Fri 04:20]--[2025-07-04 Fri 04:21] =>  0:01
CLOCK: [2025-07-04 Fri 04:17]--[2025-07-04 Fri 04:18] =>  0:01
CLOCK: [2025-07-04 Fri 03:32]--[2025-07-04 Fri 03:39] =>  0:07
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-list-of-floats-2 100
      (-let* (((actual-floats-count test-list-length)
  	     (funcall (-compose (-juxt #'seq-count-floats #'seq-length) #'generate-test-list-of-floats))))
        (should (eql actual-floats-count test-list-length))
        (should (between-one-and-255 actual-floats-count))))
#+END_SRC

****** DONE List of strings
CLOSED: [2025-07-07 Mon 21:52]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 21:47]--[2025-07-07 Mon 21:52] =>  0:05
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-list-of-strings 100
      (-let* (((actual-strings-count test-list-length)
  	     (funcall (-compose (-juxt #'seq-count-strings #'seq-length) #'generate-test-list-of-strings))))
        (should (eql actual-strings-count test-list-length))
        (should (between-one-and-255 actual-strings-count))))
#+END_SRC

***** DONE Single String
CLOSED: [2025-07-07 Mon 21:54]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 21:52]--[2025-07-07 Mon 21:55] =>  0:03
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-single-string 100
    (let* ((actual-string (generate-test-string))
  	   (actual-string-length (seq-length actual-string)))
      (should (stringp actual-string))
      (should (between-one-and-255 actual-string-length))))
#+END_SRC

***** WAITING vectors
****** DONE vector of integers
CLOSED: [2025-07-07 Mon 21:59]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 21:59]--[2025-07-07 Mon 21:59] =>  0:00
CLOCK: [2025-07-07 Mon 21:55]--[2025-07-07 Mon 21:58] =>  0:03
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-vector-of-integers 100
    (-let* (((actual-integers-count test-vector-length actual-vector)
  	     (funcall (-compose (-juxt #'seq-count-integers #'seq-length #'identity) #'generate-test-vector-of-integers))))
      (should (vectorp actual-vector))
      (should (eql actual-integers-count test-vector-length))
      (should (between-one-and-255 actual-integers-count))))
#+END_SRC
***** alists
****** DONE alist of integers
CLOSED: [2025-07-07 Mon 22:06]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 21:59]--[2025-07-07 Mon 22:06] =>  0:07
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-alist 100
      (-let* (((actual-cons-count actual-alist-length actual-alist) (funcall (-compose (-juxt #'seq-count-cons #'seq-length #'identity) #'generate-test-alist-of-integers))))
        (should (equal actual-cons-count actual-alist-length))
        (should (between-one-and-255 actual-cons-count))))
#+END_SRC

***** con
****** DONE con of integers
CLOSED: [2025-07-08 Tue 22:12]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 22:19]--[2025-07-07 Mon 22:21] =>  0:02
CLOCK: [2025-07-07 Mon 19:29]--[2025-07-07 Mon 19:34] =>  0:05
CLOCK: [2025-07-04 Fri 03:31]--[2025-07-04 Fri 03:32] =>  0:01
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-con-0 100
    (-let (((actual-con actual-car actual-cdr)(funcall (-compose (-juxt #'identity #'car #'cdr) #'generate-test-con-of-integers))))
  	 (should (consp actual-con))
  	 (should (integerp actual-car))
  	 (should (integerp actual-cdr))))
#+END_SRC
***** DONE con of floats
CLOSED: [2025-07-08 Tue 23:38]
:LOGBOOK:
CLOCK: [2025-07-07 Mon 22:21]--[2025-07-07 Mon 22:25] =>  0:04
CLOCK: [2025-07-07 Mon 19:34]--[2025-07-07 Mon 19:36] =>  0:02
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-con-1 100
    (-let (((actual-con actual-car actual-cdr)(funcall (-compose (-juxt #'identity #'car #'cdr) #'generate-test-con-of-floats))))
  	 (should (consp actual-con))
  	 (should (floatp actual-car))
  	 (should (floatp actual-cdr))))
#+END_SRC

***** DONE con of strings
CLOSED: [2025-07-08 Tue 23:41]
#+begin_src elisp :tangle yes
  (ert-deftest-n-times generate-test-data-for-con-2 100
    (-let (((actual-con actual-car actual-cdr)(funcall (-compose (-juxt #'identity #'car #'cdr) #'generate-test-con-of-strings))))
  	 (should (consp actual-con))
  	 (should (stringp actual-car))
  	 (should (stringp actual-cdr))))
#+end_src


** generics for quickcheck
*** semigroup tests
**** semigroup-concat 
***** DONE string
CLOSED: [2025-07-21 Mon 20:24]
:LOGBOOK:
CLOCK: [2025-07-21 Mon 20:23]--[2025-07-21 Mon 20:24] =>  0:01
CLOCK: [2025-07-11 Fri 04:26]--[2025-07-11 Fri 04:37] =>  0:11
CLOCK: [2025-07-11 Fri 04:17]--[2025-07-11 Fri 04:25] =>  0:08
CLOCK: [2025-07-08 Tue 23:56]--[2025-07-08 Tue 23:59] =>  0:03
CLOCK: [2025-07-08 Tue 23:52]--[2025-07-08 Tue 23:54] =>  0:02
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times semigroup-concat-strings 100
      (-let* ((((test-string-one test-string-two) expected-string-length) (funcall (-compose (-juxt #'identity #'seq-sum-map-length) (apply-partially #'times-no-args #'generate-test-string)) 2))
  	    (((actual-string actual-string-length) result-startswith-string-one result-startswith-string-two)
  	     (funcall (-compose (-juxt #'identity-and-seq-length (apply-partially #'string-prefix-p test-string-one) (apply-partially #'string-suffix-p test-string-two)) #'semigroup-concat) test-string-one test-string-two)))
        (should (and result-startswith-string-one result-startswith-string-two))
        (should (equal actual-string-length expected-string-length))
        (should (stringp actual-string))))
#+end_src
***** DONE list
CLOSED: [2025-07-21 Mon 20:23]
:LOGBOOK:
CLOCK: [2025-07-21 Mon 20:22]--[2025-07-21 Mon 20:23] =>  0:01
CLOCK: [2025-07-11 Fri 07:56]--[2025-07-11 Fri 07:57] =>  0:01
CLOCK: [2025-07-11 Fri 07:50]--[2025-07-11 Fri 07:50] =>  0:00
CLOCK: [2025-07-11 Fri 06:12]--[2025-07-11 Fri 06:27] =>  0:15
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times semigroup-concat-lists 100
      (-let* ((((test-list-one test-list-two) (test-list-one-length test-list-two-length) expected-list-length) (funcall (-compose (-juxt #'identity #'seq-map-length #'seq-sum-map-length) (apply-partially #'times-no-args #'generate-test-list-of-floats)) 2))
  	    (((actual-list actual-list-length) actual-list-prefix actual-list-suffix)
  	     (funcall (-compose (-juxt #'identity-and-seq-length (apply-partially #'take test-list-one-length) (apply-partially #'-take-last test-list-two-length)) #'semigroup-concat) test-list-one test-list-two)))
        (should (equal actual-list-prefix test-list-one))
        (should (equal actual-list-suffix test-list-two))        
        (should (equal actual-list-length expected-list-length))
        (should (listp actual-list))))
#+end_src
***** DONE vector
CLOSED: [2025-07-21 Mon 20:35]
:PROPERTIES:
:ID:       f6e8c581-96fe-4ed6-9593-342a2f700b31
:END:
:LOGBOOK:
CLOCK: [2025-07-21 Mon 20:34]--[2025-07-21 Mon 20:35] =>  0:01
CLOCK: [2025-07-21 Mon 20:24]--[2025-07-21 Mon 20:26] =>  0:02
CLOCK: [2025-07-21 Mon 19:31]--[2025-07-21 Mon 19:37] =>  0:06
CLOCK: [2025-07-11 Fri 07:57]--[2025-07-11 Fri 08:31] =>  0:34
CLOCK: [2025-07-11 Fri 07:55]--[2025-07-11 Fri 07:56] =>  0:01
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times semigroup-concat-vectors 100
      (-let* ((((test-vector-one test-vector-two) (test-vector-one-length test-vector-two-length) expected-vector-length) (funcall (-compose (-juxt #'identity #'seq-map-length #'seq-sum-map-length) (apply-partially #'times-no-args #'generate-test-vector-of-integers)) 2))
  	    (((actual-vector actual-vector-length) actual-vector-prefix actual-vector-suffix)
  	     (funcall (-compose (-juxt #'identity-and-seq-length (-rpartial #'seq-take test-vector-one-length) (apply-partially #'seq-take-last test-vector-two-length)) #'semigroup-concat) test-vector-one test-vector-two)))
        (should (equal actual-vector-prefix test-vector-one))
        ;;;(should (equal actual-vector-suffix test-vector-two))        
        (should (equal actual-vector-length expected-vector-length))
        (should (vectorp actual-vector))))
#+end_src
**** stimes
***** TODO string
:PROPERTIES:
:ID:       b4e905a2-34c5-4837-bb6f-d5b8731f95aa
:END:
:LOGBOOK:
CLOCK: [2025-07-21 Mon 22:37]--[2025-07-21 Mon 22:43] =>  0:06
CLOCK: [2025-07-21 Mon 21:32]--[2025-07-21 Mon 21:52] =>  0:20
CLOCK: [2025-07-21 Mon 20:36]--[2025-07-21 Mon 20:41] =>  0:05
:END:
#+begin_src elisp :tangle yes
  (ert-deftest-n-times stimes-string 0
      (-let* ((((test-string test-string-length) test-string-as-list) (funcall (-compose (-juxt #'identity-and-seq-length #'list) #'generate-test-string)))
  	    ((test-times expected-string-length) (funcall (-compose (-juxt #'identity (apply-partially #'*)) #'random-integer-in-range-255)))
  	    ((actual-result actual-result-as-list) (funcall (-compose (-juxt #'identity (-compose )) #'stimes) test-times test-string)))
      (should (stringp actual-result))
      (should (eql test-string-as-list))))
#+end_src
***** TODO list
***** TODO vector
*** functor tests
**** Functor laws
- [Identity]    @'fmap' 'id' == 'id'@
- [Composition] @'fmap' (f . g) == 'fmap' f . 'fmap' g@
**** fmap 
***** fmap for lists
#+begin_src elisp :tangle yes
  (ert-deftest-n-times fmap-for-list 0
    (let* ((test-list (generate-test-data))
  	 (test-list-length (seq-length test-list))
  	 (actual-list (fmap #'1+ test-list)))
      (should (listp actual-list))
      (should (eql (-sum actual-list) (+ (-sum test-list) test-list-length)))))

#+END_SRC
***** fmap for vectors
#+begin_src elisp :tangle yes
  (ert-deftest-n-times fmap-for-vectors 0
    (let* ((test-vector (generate-test-vector-of-integers))
  	 (test-vector-length (seq-length test-vector))
  	 (actual-vector (fmap #'1+ test-vector)))
      (should (vectorp actual-vector))
      (should (eql (-sum actual-vector) (+ (-sum test-vector) test-vector-length)))))

#+END_SRC
**** <$
***** <$ for list
#+begin_src elisp :tangle yes
  (ert-deftest-n-times fmap-constantly-for-list 0
    (let* ((test-list (generate-test-data))
  	 (expected-list-length (seq-length test-list))
  	 (test-constant (math-random-base))
  	 (actual-list (<$ test-constant test-list)))
      (should (listp actual-list))
      (should (eql expected-list-length expected-list-length))))

#+END_SRC
***** <$ for vector
#+begin_src elisp :tangle yes
  (ert-deftest-n-times fmap-constantly-for-vector 0
    (let* ((test-vector (generate-test-vector-of-integers))
  	 (expected-vector-length (seq-length test-vector))
  	 (test-constant (math-random-base))
  	 (actual-vector (<$ test-constant test-vector)))
       (should (vectorp actual-vector))
      (should (eql (seq-count (apply-partially eql test-constant)) expected-list-length))))

#+END_SRC
***** <$ for a string
#+begin_src elisp :tangle yes
  (ert-deftest-n-times fmap-constantly-for-string 0
    (let* ((test-string (generate-test-string-of-integers))
  	 (expected-string-length (seq-length test-string))
  	 (test-constant (math-random-base))
  	 (actual-string (<$ test-constant test-string)))
       (should (stringp actual-string))
      (should (eql (seq-count (apply-partially eql test-constant)) expected-list-length))))

#+END_SRC




